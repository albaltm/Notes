@page "/library"
@using AppNotes.Components.Layout
@using AppNotes.Components.Components
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@layout MainLayout
@inherits Global
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inject SynchronizationService SynchronizationService
@inject LibraryService LibraryService
@inject IDialogService DialogService

<style>
    .mud-chip-transparency{
        opacity: 0.8;
    }

    #notemenu{
        width:100%;
    }
</style>

@if(Notes != null) 
{
    <div class="d-flex">
        <div>
            <MudMenu>
                <ActivatorContent>
                    <MudFab StartIcon="@Icons.Material.Rounded.FilterList" Color="Color.Default" Size="Size.Small" Style="cursor:pointer; min-width:3em;" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Class="py-1" AutoClose="false">
                        <MudTextField T="string" Label="Búsqueda" @bind-Value="searchText" Immediate AdornmentIcon="@Icons.Material.Filled.Search"
                                      AdornmentColor="Color.Primary" OnAdornmentClick="FilterByName" Adornment="Adornment.End" />
                    </MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByName" OnTouch="OrderByName">Nombre</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByCreation" OnTouch="OrderByCreation">Fecha creación</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByModification" OnTouch="OrderByModification">Fecha modificación</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="RestartFilter" OnTouch="RestartFilter">Reiniciar filtro</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </div>
        
        <MudStack Row="true" Spacing="1" style="overflow-x:auto; display:inline-block;" Class="px-2 pb-1 pb-2">
            @foreach (var notebook in NotebooksFilter)
            {
                <MudMenu ActivationEvent="@MouseEvent.RightClick">
                    <ActivatorContent>
                        @if (notebook.Favorite)
                        {
                            <MudChip Icon="@notebook.Icon" Color="Color.Primary" Class="mb-2 shadow" Text="@notebook.Name" Style="min-width:fit-content;" @onclick="() => AccessNotebook(notebook)" />
                        }
                        else
                        {
                            <MudChip Icon="@notebook.Icon" Color="Color.Primary" Class="mb-2 mud-chip-transparency shadow" Text="@notebook.Name" Style="min-width:fit-content;" @onclick="() => AccessNotebook(notebook)" />
                        }
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Class="py-1" OnClick="() => CheckFavorite(notebook)">Destacado <MudIcon Icon="@(notebook.Favorite ? Icons.Material.Rounded.Star : Icons.Material.Rounded.StarOutline)" Size="Size.Small"></MudIcon></MudMenuItem>
                        <MudMenuItem Class="py-1" OnClick="() => EditNotebook(notebook)" OnTouch="() => EditNotebook(notebook)">Editar</MudMenuItem>
                        <MudMenuItem Class="py-1" OnClick="() => DeleteNotebook(notebook)" OnTouch="() => DeleteNotebook(notebook)">Eliminar</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            }
        </MudStack>
    </div>

    <div class="row row-cols-1 row-cols-md-2 m-2 my-4">
        @foreach (var note in NotesFilter)
        {
            <div class="px-2">
                <MudMenu id="notemenu" ActivationEvent="@MouseEvent.RightClick" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                     <ActivatorContent >
                        <div class="col mb-3 py-5 px-1 shadow" @onclick="() => AccessNote(note)"
                             style="background-color:@note.BackgroundColor; border-radius:15px; cursor:pointer; border: 2px solid #ababab;">
                            <span style="color: @note.TextColor; height:2em;" class="overflow-hidden d-flex justify-content-between mx-auto">
                                <span style="color:@note.TextColor; width:3em;">
                                    @if (note.Favorite)
                                    {
                                        <MudIcon Icon="@Icons.Material.Rounded.StarOutline" Size="Size.Small" Class="ms-1" Style="width:0.7em;"></MudIcon>
                                    }
                                </span>
                                <span class="pt-1">@note.Name</span>
                                <span style="width:3em;"></span>
                            </span>
                        </div>
                    
                     </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Class="py-0" OnClick="() => DeleteNote(note)" OnTouch="() => DeleteNote(note)">Eliminar</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        }
    </div>
}

<CreateButton />


@code {
    private List<Note> Notes { get; set; }
    private List<Notebook> Notebooks { get; set; }
    private List<Note> NotesFilter { get; set; }
    private List<Notebook> NotebooksFilter { get; set; }
    string token;

    string searchText = "";

    protected async override void OnInitialized()
    {
        token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");

        Recargar(true);
        await SynchronizationService.TrySync(token);
        Recargar(true);
    }

    private void Recargar(bool resetFilter)
    {
        Notes = _conn.GetNotes().OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        Notebooks = _conn.GetNotebooks().OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();

        if (resetFilter)
        {
            NotesFilter = Notes.ToList();
            NotebooksFilter = Notebooks.ToList();
        }

        StateHasChanged();
    }

    public void AccessNote(Note note)
    {
        NavigationManager.NavigateTo($"/editnote/{note.Id}");
    }

    public void AccessNotebook(Notebook notebook)
    {
        var notes = _conn.GetNotes().Where(x => x.Notebook.Equals(notebook.Id));
        if (notes.Count() > 0)
        {
            if (string.IsNullOrEmpty(notebook.Bookmark))
            {
                NavigationManager.NavigateTo($"/editnote/{notes.Where(x => x.Position == 0).First().Id}");
            }
            else
            {
                NavigationManager.NavigateTo($"/editnote/{notes.Where(x => x.Id.Equals(notebook.Bookmark)).First().Id}");
            }
        }
    }

    private async void CheckFavorite(Notebook notebook)
    {
        notebook.Favorite = !notebook.Favorite;
        notebook.Modified = DateTime.UtcNow;
        _conn.Conn.Update(notebook);
        await SynchronizationService.TrySyncLibrary(token);
        Recargar(false);
    }

    private void EditNotebook(Notebook notebook)
    {
        var parameters = new DialogParameters<EditNotebook>();
        parameters.Add(x => x.Id, notebook.Id);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        DialogService.Show<EditNotebook>("Libreta", parameters, options);
    }

    private async void DeleteNotebook(Notebook notebook)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta libreta?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            LibraryService.DeleteNotebook(token, FirebasePath, notebook);
            Recargar(false); 
            NotebooksFilter.Remove(notebook);

            await SynchronizationService.TrySyncLibrary(token);
            StateHasChanged();
        }
    }

    private async void DeleteNote(Note note)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta nota?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            LibraryService.DeleteNote(token, FirebasePath, note);
            Recargar(false);
            NotesFilter.Remove(note);

            await SynchronizationService.TrySyncLibrary(token);
            StateHasChanged();
        }
    }

    private void FilterByName()
    {
        NotesFilter = NotesFilter.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList();
        NotebooksFilter = NotebooksFilter.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList();
        searchText = "";
        StateHasChanged();
    }
    private void OrderByName()
    {
        NotesFilter = Notes.OrderBy(x => x.Name).ToList();
        NotebooksFilter = Notebooks.OrderBy(x => x.Name).ToList();
        StateHasChanged();
    }
    private void OrderByCreation()
    {
        NotesFilter = Notes.OrderByDescending(x => x.Created).ToList();
        NotebooksFilter = Notebooks.OrderByDescending(x => x.Created).ToList();
        StateHasChanged();
    }
    private void OrderByModification()
    {
        NotesFilter = Notes.OrderByDescending(x => x.Modified).ToList();
        NotebooksFilter = Notebooks.OrderByDescending(x => x.Modified).ToList();
        StateHasChanged();
    }
    private void RestartFilter()
    {
        NotesFilter = Notes.ToList();
        NotebooksFilter = Notebooks.ToList();
        StateHasChanged();
    }
}
