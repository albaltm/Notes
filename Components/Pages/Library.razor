@page "/library"
@using AppNotes.Components.Layout
@using AppNotes.Components.Components
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@layout MainLayout
@inherits Global
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inject SynchronizationService SynchronizationService
@inject IDialogService DialogService

@if(Notes != null) 
{
    <div class="d-flex">
        <MudFab StartIcon="@Icons.Material.Rounded.ImportContacts" OnClick="CreateNotebook" Color="Color.Default" Size="Size.Small" Style="cursor:pointer; min-width:3em; margin-right:1em;"/>
        <MudStack Row="true" Spacing="1" style="overflow-x:auto; display:inline-block;" Class="ps-2 pb-3">
            
            @foreach (var notebook in Notebooks)
            {
                <MudMenu ActivationEvent="@MouseEvent.RightClick">
                    <ActivatorContent>
                        @if (notebook.Favorite)
                        {
                            <MudChip Icon="@notebook.Icon" Color="Color.Primary" Class="mb-2 border border-secondary shadow" Text="@notebook.Name" Style="min-width:fit-content;" @onclick="() => Access(notebook)" />
                        }
                        else
                        {
                            <MudChip Icon="@notebook.Icon" Color="Color.Primary" Class="mb-2 shadow-sm" Text="@notebook.Name" Style="min-width:fit-content;" @onclick="() => Access(notebook)" />
                        }
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="() => EditNotebook(notebook)" OnTouch="() => EditNotebook(notebook)">Editar</MudMenuItem>
                        <MudMenuItem OnClick="() => DeleteNotebook(notebook)" OnTouch="() => DeleteNotebook(notebook)">Eliminar</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            }
        </MudStack>
    </div>
        
  

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 m-2 mt-4">
        @foreach (var note in Notes)
        {
            <div class="px-2">
                <div class="col mb-3 py-3 py-md-4 py-lg-5 px-1 shadow" @onclick="() => Access(note)"
                     style="background-color:@note.BackgroundColor; border-radius:15px; cursor:pointer; border: 1px solid grey;">
                    <span style="color: @note.TextColor;" class="overflow-hidden d-flex justify-content-between mx-auto">
                        <span style="color:@note.TextColor; width:3em;">
                            @if (note.Favorite)
                            {
                                <MudIcon Icon="@Icons.Material.Rounded.Star" Size="Size.Small"></MudIcon>
                            }
                        </span>
                        <span>@note.Name</span>
                        <span style="width:3em;"></span>
                    </span>
                </div>
            </div>
        }
    </div>
}

<CreateButton/>

@code {
    private List<Note> Notes { get; set; }
    private List<Notebook> Notebooks { get; set; }
    string token;

    protected async override void OnInitialized()
    {
        token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        await SynchronizationService.TrySync(token);

        Notes = _conn.GetNotes().OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        Notebooks = _conn.GetNotebooks().OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        StateHasChanged();
    }

    public void Access(IBiblioteca element)
    {
        if (element is Note)
        {
            NavigationManager.NavigateTo($"/editnote/{element.Id}");
        }
        else if (element is Notebook)
        {
            NavigationManager.NavigateTo($"/editnotebook/{element.Id}");            
        }
    }

    public void CreateNotebook()
    {
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        DialogService.Show<EditNotebook>("Libreta", options);
    }

    private void EditNotebook(Notebook notebook)
    {
        var parameters = new DialogParameters<EditNotebook>();
        parameters.Add(x => x.Id, notebook.Id);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        DialogService.Show<EditNotebook>("Libreta", parameters, options);
    }

    private async void DeleteNotebook(Notebook notebook)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta libreta?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            if (!token.Equals("guest"))
            {
                try
                {
                    FirebaseClient client = new FirebaseClient(FirebasePath);
                    await client.Child("notebook").Child(notebook.Id).DeleteAsync();
                    client.Dispose();
                }
                catch
                {
                    DeleteQueue item = new DeleteQueue()
                        {
                            Id = notebook.Id,
                            Type = DocumentType.Notebook
                        };
                    _conn.GetConnection().Insert(item);
                }
            }
            _conn.GetConnection().Delete(notebook);
            NavigationManager.NavigateTo("library", true);
        }
    }
}
