@page "/library"
@page "/library/{Id}"
@using AppNotes.Components.Layout
@using AppNotes.Components.Components
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@layout MainLayout
@inherits Global
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inject SynchronizationService SynchronizationService
@inject LibraryService LibraryService
@inject IDialogService DialogService

<style>
    .mud-chip-transparency{
        opacity: 0.8;
    }

    #notemenu{
        width:100%;
    }
</style>

@if(Notes != null) 
{
    <div class="d-flex mb-4">
        <div>
            <MudMenu>
                <ActivatorContent>
                    <MudFab StartIcon="@Icons.Material.Rounded.FilterList" Color="Color.Default" Size="Size.Small" Style="cursor:pointer; min-width:3em;" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Class="py-1" AutoClose="false">
                        <MudTextField T="string" Label="Búsqueda" @bind-Value="searchText" Immediate AdornmentIcon="@Icons.Material.Filled.Search"
                                      AdornmentColor="Color.Primary" OnAdornmentClick="FilterByName" Adornment="Adornment.End" Clearable OnClearButtonClick="() => Recargar(true)" />
                    </MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByName" OnTouch="OrderByName">Nombre</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByCreation" OnTouch="OrderByCreation">Fecha creación</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="OrderByModification" OnTouch="OrderByModification">Fecha modificación</MudMenuItem>
                    <MudMenuItem Class="py-1" OnClick="() => Recargar(true)" OnTouch="() => Recargar(true)">Reiniciar filtro</MudMenuItem>
                    @if (Notebooks.Count() > 0)
                    {
                        <MudMenuItem Class="py-1" OnClick="ManageNotebooks" OnTouch="ManageNotebooks">Gestionar libretas</MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        </div>

        <MudStack Row="true" Spacing="1" style="overflow-x:auto; display:inline-block;" Class="px-2 pb-3">
            @foreach (var notebook in NotebooksFilter)
            {
                var displayname = notebook.Name.Length > 15 ? $"{notebook.Name.Substring(0, 15)}..." : notebook.Name;
                <MudChip Icon="@notebook.Icon" Color="Color.Primary" Class="shadow" Text="@displayname" Style="min-width:fit-content;" @onclick="() => AccessNotebook(notebook)" />
            }
        </MudStack>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 mt-0 mb-4 px-2 px-sm-0">
        @foreach (var note in NotesFilter)
        {
            <div class="px-2">
                <div class="col mb-3 mb-md-5 px-1 shadow d-flex" @onclick="() => AccessNote(note)"
                     style="background-color:@note.BackgroundColor; border-radius:4px; cursor:pointer; border: 1px solid rgba(139, 139, 139, 0.2); height:9vw; min-height:5em; max-height:9em;">
                    <span style="color:@note.TextColor; width:3em;" class="position-relative">
                        <MudMenu>
                            <ActivatorContent>
                                <MudIconButton Class="position-absolute top-0 start-0" Icon="@(note.Favorite ? Icons.Material.Rounded.Star : Icons.Material.Rounded.MoreVert)" Style="width:1.2em; height:1.2em; margin-top:-0.2em;" Size="Size.Small"></MudIconButton>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Class="py-1" OnClick="() => CheckFavoriteNote(note)" OnTouch="() => CheckFavoriteNote(note)">@(note.Favorite ? "Quitar destacado" : "Destacar")</MudMenuItem>
                                @if (string.IsNullOrEmpty(note.Notebook))
                                {
                                    <MudMenuItem Class="py-1" OnClick="() => AddToNotebook(note)" OnTouch="() => AddToNotebook(note)">Añadir a libreta</MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem Class="py-1" OnClick="() => DeleteFromNotebook(note)" OnTouch="() => DeleteFromNotebook(note)">Quitar de libreta</MudMenuItem>
                                }
                                <MudMenuItem Class="py-1" OnClick="() => DeleteNote(note)" OnTouch="() => DeleteNote(note)">Eliminar</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </span>
                    <span style="color: @note.TextColor; height:100%;" class="overflow-hidden d-flex justify-content-between my-auto w-100">
                        <span class="d-flex pt-xl-2" style="flex-direction:row;">
                            <p class="my-auto mt-md-4 mt-xl-5" style="max-height:3em; font-size:1.1em; overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:2; word-wrap:anywhere;">
                                @note.Name
                            </p>
                        </span>
                    </span>
                    <span style="width:3em;"></span>
                </div>
            </div>
        }
    </div>
}

<CreateButton />


@code {
    [Parameter]
    public string? Id { get; set; }

    private List<Note> Notes { get; set; }
    private List<Notebook> Notebooks { get; set; }
    private List<Note> NotesFilter { get; set; }
    private List<Notebook> NotebooksFilter { get; set; }
    string token;

    string searchText = "";

    protected async override void OnInitialized()
    {
        token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");

        Recargar(true);

        if (Id != null)
        {
            NotesFilter = Notes.Where(x => x.Notebook.Equals(Id)).OrderBy(x => x.Position).ToList();
            NotebooksFilter = Notebooks.Where(x => x.Id.Equals(Id)).ToList();
            Id = null;
            NavigationManager.NavigateTo("/library");
        }

        await SynchronizationService.TrySync(token);
        Recargar(false);
    }

    private void Recargar(bool resetFilter)
    {
        Notes = _conn.GetNotes().OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        Notebooks = _conn.GetNotebooks().OrderByDescending(x => x.Modified).ToList();

        if (resetFilter)
        {
            NotesFilter = Notes.ToList();
            NotebooksFilter = Notebooks.ToList();
        }

        StateHasChanged();
    }

    public void AccessNote(Note note)
    {
        NavigationManager.NavigateTo($"/editnote/{note.Id}");
    }

    public void AccessNotebook(Notebook notebook)
    {
        var notes = _conn.GetNotes().Where(x => x.Notebook.Equals(notebook.Id));
        if (notes.Count() > 0)
        {
            if (string.IsNullOrEmpty(notebook.Bookmark))
            {
                NavigationManager.NavigateTo($"/editnote/{notes.Where(x => x.Position == 0).First().Id}");
            }
            else
            {
                NavigationManager.NavigateTo($"/editnote/{notes.Where(x => x.Id.Equals(notebook.Bookmark)).First().Id}");
            }
        }
        else
        {
            EditNotebook(notebook);
        }
    }

    private async void CheckFavoriteNote(Note note)
    {
        note.Favorite = !note.Favorite;
        note.Modified = DateTime.UtcNow;
        _conn.Conn.Update(note);
        NotesFilter = NotesFilter.OrderByDescending(x => x.Favorite).ToList();
        Recargar(false);
        await SynchronizationService.TrySyncLibrary(token);
        Recargar(false);
    }

    private async void EditNotebook(Notebook notebook)
    {
        var parameters = new DialogParameters<EditNotebook>();
        parameters.Add(x => x.Id, notebook.Id);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        var dialog = await DialogService.ShowAsync<EditNotebook>("Libreta", parameters, options);
        var result = await dialog.Result;
        Recargar(true);
    }

    private async void DeleteNotebook(Notebook notebook)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta libreta?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            LibraryService.DeleteNotebook(token, FirebasePath, notebook);
            Recargar(false); 
            NotebooksFilter.Remove(notebook);

            await SynchronizationService.TrySyncLibrary(token);
            StateHasChanged();
        }
    }

    private async void DeleteNote(Note note)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta nota?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            await LibraryService.DeleteNote(token, FirebasePath, note);
            Recargar(false);
            NotesFilter.Remove(note);

            await SynchronizationService.TrySyncLibrary(token);
            StateHasChanged();
        }
    }

    private async void AddToNotebook(Note note)
    {
        var parameters = new DialogParameters<ChooseNotebook>();
        parameters.Add(x => x.Note, note.Id);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        var dialog = await DialogService.ShowAsync<ChooseNotebook>("Libretas", parameters, options);
        await dialog.Result;
        Recargar(true);
    }

    private void DeleteFromNotebook(Note note)
    {
        var notebook = _conn.GetNotebook(note.Notebook);
        
        var notesinnotebook = _conn.GetNotes().Where(x => x.Notebook.Equals(note.Notebook) && !x.Id.Equals(note.Id) && x.Position > note.Position).OrderBy(x => x.Position).ToList();
        foreach (var notetoposition in notesinnotebook)
        {
            var position = notetoposition.Position -1;
            notetoposition.Position = position;
            notetoposition.Modified = DateTime.UtcNow;
            _conn.Conn.Update(notetoposition);
        }

        if (notebook.Bookmark.Equals(note.Id))
        {
            notebook.Bookmark = "";
        }

        note.Notebook = "";
        note.Position = -1;
        notebook.Modified = DateTime.UtcNow;
        note.Modified = DateTime.UtcNow;
        _conn.Conn.Update(notebook);
        _conn.Conn.Update(note);
    }

    private void FilterByName()
    {
        NotesFilter = Notes.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList();
        NotebooksFilter = Notebooks.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList();
    }
    private void OrderByName()
    {
        NotesFilter = Notes.OrderBy(x => x.Name).ToList();
        NotebooksFilter = Notebooks.OrderBy(x => x.Name).ToList();
    }
    private void OrderByCreation()
    {
        NotesFilter = Notes.OrderByDescending(x => x.Created).ToList();
        NotebooksFilter = Notebooks.OrderByDescending(x => x.Created).ToList();
    }
    private void OrderByModification()
    {
        NotesFilter = Notes.OrderByDescending(x => x.Modified).ToList();
        NotebooksFilter = Notebooks.OrderByDescending(x => x.Modified).ToList();
    }

    private async void ManageNotebooks()
    {
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        var dialog = await DialogService.ShowAsync<ManageNotebooks>("Libretas", options);
        var result = await dialog.Result;
        Recargar(true);
    }
}
