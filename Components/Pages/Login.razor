@page "/login"
@using AppNotes.Components.Components
@using Firebase.Auth
@using Firebase.Auth.Providers
@using Firebase.Database
@using Firebase.Database.Query
@using MudBlazor.Services
@using AppNotes.Components.Layout
@using System;
@using System.Threading.Tasks;
@using FirebaseAdmin;
@using Google.Apis.Auth.OAuth2;
@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject ConexionBBDD _connection
@layout EmptyLayout
@inherits Global



<div class="col-11 col-sm-8 col-md-6 m-auto bg-light position-relative d-block py-5" style="height: 100vh">
    <div class="position-absolute top-50 start-50 translate-middle w-100">
        <img src="images/@(imagen).png" class="mx-auto d-block" style="width:45%; max-width:30vh;" />
        <MudForm @ref="form">
            <div class="col-9 col-sm-8 col-lg-7 col-xl-6 mt-6 mx-auto d-flex">
                <MudTextField Style="max-height: 10vh;" @bind-Value="Correo" Placeholder="Correo electrónico" Variant="MudBlazor.Variant.Outlined"></MudTextField>
            </div>
            <div class="col-9 col-sm-8 col-lg-7 col-xl-6 mt-2 mx-auto d-flex">
                <MudTextField Style="max-height: 10vh;" @bind-Value="Passwd" @onfocusin="() => ChangeIcon(false)" Placeholder="Contraseña" 
                    Variant="MudBlazor.Variant.Outlined" Adornment="Adornment.End" InputType="@(ShowPasswd ? InputType.Text : InputType.Password)" 
                    AdornmentIcon="@(ShowPasswd ? Icons.Material.Rounded.VisibilityOff : Icons.Material.Rounded.Visibility)"
                    OnAdornmentClick="@(() => ChangeIcon(true))" @onkeypress="Enter" />
            </div>
        </MudForm>
        <div class="col-9 col-sm-8 col-lg-7 col-xl-6 mt-1 mx-auto d-flex">
            <span class="col-12 text-muted text-end" style="font-size:90%; cursor:pointer" @onclick="OpenDialog">Recuperar contraseña</span>
        </div>
        <div class="row mt-6">
            <button type="button" class="btn btn-sm btn-dark col-8 col-sm-3 m-auto py-sm-1 py-md-2 py-lg-3" @onclick="IniciarSesion">Entrar</button>
        </div>
        <div class="col-12 mx-auto mt-6 row d-lg-flex mt-2">
            <a class="text-muted d-block col-lg-6 d-lg-inline-block text-center text-lg-end pe-lg-6 mb-1" style="font-size:90%; cursor:pointer; text-decoration:underline;" href="/register">¿Aún no te has registrado?</a>
            <a class="text-muted d-block col-lg-6 d-lg-inline-block text-center text-lg-start ps-lg-6 mb-1" style="font-size:90%; cursor:pointer; text-decoration:underline;" @onclick="AccesoSinConexion">Acceder sin iniciar sesión.</a>
        </div>
    </div>
</div>
@code {
    string imagen = "login_looking_down";
    MudForm form;

    string UserId { get; set; }
    string Correo { get; set; }
    string Passwd { get; set; }
    bool ShowPasswd = false;

    private void ChangeIcon(bool changeShow)
    {
        if (changeShow == true)
        {
            ShowPasswd = !ShowPasswd;
        }
        if (ShowPasswd)
        {
            imagen = "login_looking_down";
        }
        else
        {
            imagen = "login_eyes_closed";
        }
    }

    private async Task<bool> ValidateLogin()
    {
        try
        {
            FirebaseClient client = new FirebaseClient(FirebasePath);
            var user = (await client.Child("users").OnceAsync<Usuario>()).Select(x => x.Object).Where(x => x.Email.ToLower().Equals(Correo.ToLower())).ToList().FirstOrDefault();
            if (user == null || !GetSHA1(Passwd).Equals(user.Password))
            {
                Snackbar.Add("El correo o la contraseña introducidos no son correctos", Severity.Error);
                return false;
            }
            UserId = user.Id;
            client.Dispose();
        }
        catch
        {
            Snackbar.Add("No se ha podido iniciar sesión. Vuelve a intentarlo más tarde", Severity.Error);
            return false;
        }
        return true;
    }

    private async void IniciarSesion()
    {
        try
        {
            await form.Validate();
            if (form.IsValid && await ValidateLogin())
            {
                var config = new FirebaseAuthConfig
                    {
                        AuthDomain = "localhost",
                        ApiKey = "AIzaSyBLaICwRVx-wyVBiL9qsOCR84VPmDs51Tw"
                    };

                try
                {
                    FirebaseClient client = new FirebaseClient(FirebasePath);
                    var authentication = new UserAuthentication()
                        {
                            User = (await client.Child("users").OnceAsync<Usuario>()).Select(x => x.Object).Where(x => x.Email.ToLower().Equals(Correo.ToLower())).FirstOrDefault().Id
                        };
                    var firebaseauth = await client.Child("userauthentication").PostAsync(authentication);
                    authentication.Token = firebaseauth.Key;
                    await client.Child("userauthentication").Child(firebaseauth.Key).PutAsync(authentication);
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", authentication.Token);
                    client.Dispose();
                    NavigationManager.NavigateTo("/");
                }
                catch { }
            }
        }
        catch
        {
            Snackbar.Add("No se ha podido iniciar sesión. Vuelve a intentarlo más tarde", Severity.Error);
        }
    }

    public async void AccesoSinConexion()
    {
        bool? result = await DialogService.ShowMessageBox(
            "¿Seguro?",
            "No podrás sincronizar tus datos en otros dispositivos, pero puedes crear una cuenta más adelante.",
            yesText: "Confirmar", cancelText: "Cancelar");
        if (result != null)
        {
            await JSRuntime.InvokeAsync<string>("localStorage.setItem", "token", "guest");
            NavigationManager.NavigateTo("/");
        }
    }

    private void OpenDialog()
    {
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions() 
        {
            DisableBackdropClick = true,
            CloseOnEscapeKey = false,
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        };
        DialogService.Show<PasswordRecovery>("Recuperación de contraseña", options);
    }

    private static string GetSHA1(string str)
    {
        SHA1 sha1 = SHA1Managed.Create();
        ASCIIEncoding encoding = new ASCIIEncoding();
        byte[] stream = null;
        StringBuilder sb = new StringBuilder();
        stream = sha1.ComputeHash(encoding.GetBytes(str));
        for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);
        return sb.ToString();
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            IniciarSesion();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }
}
