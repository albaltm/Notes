@page "/todosummary"
@using AppNotes.Components.Layout
@using AppNotes.Services
@layout MainLayout
@inject ToDoService TodoService
@inject ConexionBBDD _conn
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inherits Global

@* <style>
    .rz-legend{
        display:none;
    }
</style> *@
<style>
    .hoverclass:hover {
        background-color: rgba(123, 123, 123, 0.2) !important;
        cursor: pointer;
    }
</style>

<div class="d-flex mb-4">
    <MudIconButton Icon="@Icons.Material.Rounded.ArrowBack" OnClick="GoBack" />
    <MudMenu @ref="mudmenu">
        <ActivatorContent>
            <MudIconButton Icon="@Icons.Material.Rounded.FilterAlt" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem Class="py-1" AutoClose="false">
                <MudTextField T="string" Label="Búsqueda" @bind-Value="searchText" Immediate AdornmentIcon="@Icons.Material.Filled.Search"
                              AdornmentColor="Color.Primary" OnAdornmentClick="FilterByName" Adornment="Adornment.End" Clearable OnClearButtonClick="() => Filter(5)" />
            </MudMenuItem>
            <MudMenuItem OnClick="() => Filter(0)" OnTouch="() => Filter(0)">Hoy</MudMenuItem>
            <MudMenuItem OnClick="() => Filter(1)" OnTouch="() => Filter(1)">Esta semana</MudMenuItem>
            <MudMenuItem OnClick="() => Filter(2)" OnTouch="() => Filter(2)">Este mes</MudMenuItem>
            <MudMenuItem OnClick="() => Filter(3)" OnTouch="() => Filter(3)">Este año</MudMenuItem>
            <MudMenuItem OnClick="() => rangePicker.Open()" OnTouch="() => rangePicker.Open()" AutoClose="false">
                <ChildContent>
                    <span class="d-flex" style="height:1.5em;">
                        <span>Rango</span>
                        <MudDateRangePicker @ref="rangePicker" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.BottomRight" DisableToolbar DisplayMonths="1" DisableUnderLine Style="width:3em; display:inline-block; margin-top:3em;" @bind-DateRange="dateRange" />
                    </span>
                </ChildContent>
            </MudMenuItem>
            <MudMenuItem OnClick="() => Filter(5)" OnTouch="() => Filter(5)">Todas</MudMenuItem>
        </ChildContent>
    </MudMenu>
    <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary" Class="flex-grow-1 fw-bold" style="padding-right:1.5em; padding-top:0.37em;">@(filter == 5 ? "Todas" : filter == 0 ? "Hoy" : filter == 1 ? "Esta semana" : filter == 2 ? "Este mes" : filter == 3 ? "Este año" : $"{SelectedStart.Value.ToShortDateString()} - {SelectedEnd.Value.ToShortDateString()}")</MudText>
    <MudMenu TransformOrigin="Origin.TopRight" AnchorOrigin="Origin.TopRight">
        <ActivatorContent>
            <MudIconButton Icon="@Icons.Material.Rounded.MoreVert" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="() => Delete(0)" OnTouch="() => Delete(0)">Eliminar todas</MudMenuItem>
            <MudMenuItem OnClick="() => Delete(1)" OnTouch="() => Delete(1)">Eliminar tareas pasadas</MudMenuItem>
            <MudMenuItem OnClick="() => Delete(2)" OnTouch="() => Delete(2)">Eliminar completadas</MudMenuItem>
        </ChildContent>
    </MudMenu>
</div>

@if ((ToDosToDo.Count() > 0 || ToDosInProgress.Count() > 0 || ToDosDone.Count() > 0) && filter != 4 && filter > 0)
{
    <MudChart ChartOptions="@(new() { ChartPalette = new[] { "rgba(162, 77, 255, 0.8)", "rgba(66, 170, 255, 0.8)", "rgba(66, 255, 201, 0.8)" } })" ChartType="ChartType.Pie" Width="10em" Height="10em" LegendPosition="Position.Right" InputData="@data" InputLabels="@labels" Style="margin: 4em 0;" @bind-SelectedIndex="Index" />
}
@if ((ToDosToDo.Count() > 0 || ToDosInProgress.Count() > 0 || ToDosDone.Count() > 0) && filter == 4 && filter > 0)
{
    <MudChart ChartOptions="@(new() { ChartPalette = new[] { "rgba(66, 170, 255, 0.8)", "rgba(66, 255, 201, 0.8)" } })" ChartType="ChartType.Pie" Width="10em" Height="10em" LegendPosition="Position.Right" InputData="@datafilter" InputLabels="@labelsfilter" Style="margin: 4em 0;" @bind-SelectedIndex="Index" />
}

@if (ToDosToDo.Count() > 0)
{
    <div class="justify-content-between expandable d-flex p-2 px-4 mt-5" style="border-radius: 5px; background-color: @(filter == 4 ? "rgba(66, 170, 255, 0.8)" : "rgba(162, 77, 255, 0.6)") ; cursor:pointer;" @onclick="@(() => toDoExpanded = !toDoExpanded)">
        <MudText Class="flex-grow-1">@(filter == 4 ? "Todo" : "Por hacer")</MudText>
            <MudText Style="font-size:1em; padding-top:0.2em; padding-right: 0.4em;">@ToDosToDo.Count</MudText>
        <MudIcon Icon="@(toDoExpanded ? @Icons.Material.Rounded.KeyboardArrowUp : @Icons.Material.Rounded.KeyboardArrowDown)" Class="flex-shrink-1" />
    </div>
    <MudCollapse Expanded="toDoExpanded">
        @foreach (var todo in ToDosToDo)
        {
            <MudPaper Outlined="true" Class="my-2 p-2 py-3 w-100 d-flex hoverclass" Style="flex-direction:row;" @onclick="() => OpenToDo(todo)">
                <div class="my-auto">
                    <span style="color: @todo.Color;"><MudIcon Icon="@todo.Icon" Class="m-0 me-2 my-auto p-0" Size="Size.Small" /></span>
                </div>
                <div class="w-100">
                    <p style="overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:1; word-wrap:anywhere;" class="m-0">@todo.Text</p>
                    <p class="m-0">
                        @todo.Start.ToShortDateString() @if (todo.Start.TimeOfDay != todo.Start.Date.TimeOfDay)
                        {
                            <span>   -   @todo.Start.ToShortTimeString()</span>
                        }
                    </p>
                </div>
            </MudPaper>
        }
    </MudCollapse>
}

@if (ToDosInProgress.Count() > 0)
{
    <div class="justify-content-between expandable d-flex p-2 px-4 mt-5" style="border-radius: 5px; background-color:rgba(66, 170, 255, 0.6); cursor:pointer;" @onclick="@(() => inProgressExpanded = !inProgressExpanded)">
        <MudText Class="flex-grow-1">En progreso</MudText>
            <MudText Style="font-size:1em; padding-top:0.2em; padding-right: 0.4em;">@ToDosInProgress.Count</MudText>
        <MudIcon Icon="@(inProgressExpanded ? @Icons.Material.Rounded.KeyboardArrowUp : @Icons.Material.Rounded.KeyboardArrowDown)" Class="flex-shrink-1" />
    </div>
    <MudCollapse Expanded="inProgressExpanded">
        @foreach (var todo in ToDosInProgress)
        {
            <MudPaper Outlined="true" Class="my-2 p-2 py-3 w-100 d-flex hoverclass" Style="flex-direction:row;" @onclick="() => OpenToDo(todo)">
                <div class="my-auto">
                    <span style="color: @todo.Color;"><MudIcon Icon="@todo.Icon" Class="m-0 me-2 my-auto p-0" Size="Size.Small" /></span>
                </div>
                <div class="w-100">
                    <p style="overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:1; word-wrap:anywhere;" class="m-0">@todo.Text</p>
                    <p class="m-0">
                        @todo.Start.ToShortDateString() @if (todo.Start.TimeOfDay != todo.Start.Date.TimeOfDay)
                        {
                            <span>   -   @todo.Start.ToShortTimeString()</span>
                        }
                    </p>
                </div>
            </MudPaper>
        }
    </MudCollapse>
}

@if (ToDosDone.Count() > 0)
{
    <div class="justify-content-between expandable d-flex p-2 px-4 mt-5" style="border-radius: 5px; background-color: rgba(66, 255, 201, 0.6); cursor:pointer;" @onclick="@(() => doneExpanded = !doneExpanded)">
        <MudText Class="flex-grow-1">Completado</MudText>
            <MudText Style="font-size:1em; padding-top:0.2em; padding-right: 0.4em;">@ToDosDone.Count</MudText>
        <MudIcon Icon="@(doneExpanded ? @Icons.Material.Rounded.KeyboardArrowUp : @Icons.Material.Rounded.KeyboardArrowDown)" Class="flex-shrink-1" />
    </div>
    <MudCollapse Expanded="doneExpanded">
        @foreach (var todo in ToDosDone)
        {
            <MudPaper Outlined="true" Class="my-2 p-2 py-3 w-100 d-flex hoverclass" Style="flex-direction:row;" @onclick="() => OpenToDo(todo)">
                <div class="my-auto">
                    <span style="color: @todo.Color;"><MudIcon Icon="@todo.Icon" Class="m-0 me-2 my-auto p-0" Size="Size.Small" /></span>
                </div>
                <div class="w-100">
                    <p style="overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:1; word-wrap:anywhere;" class="m-0">@todo.Text</p>
                    <p class="m-0">
                        Completado el @todo.CompletedAt.Value.ToShortDateString() a las @todo.CompletedAt.Value.ToShortTimeString()
                    </p>
                </div>
            </MudPaper>
        }
    </MudCollapse>
}

@if (ToDosToDo.Count() == 0 && ToDosInProgress.Count() == 0 && ToDosDone.Count() == 0)
{
    <MudText Typo="Typo.h6" Align="Align.Center" Class="text-muted" Style="margin-top:30vh;">No hay nada que ver aquí</MudText>
}

@code {
    MudMenu mudmenu;
    MudDateRangePicker rangePicker;
    string token;

    List<ToDoItem> ToDos { get; set; } = new List<ToDoItem>();
    List<ToDoItem> ToDosToDo { get; set; } = new List<ToDoItem>();
    List<ToDoItem> ToDosInProgress { get; set; } = new List<ToDoItem>();
    List<ToDoItem> ToDosDone { get; set; } = new List<ToDoItem>();

    bool toDoExpanded = false;
    bool inProgressExpanded = false;
    bool doneExpanded = false;

    string searchText { get; set; } = "";
    private int index = -1;
    public int Index
    {
        get { return index; }
        set
        {
            index = value;
            toDoExpanded = false;
            inProgressExpanded = false;
            doneExpanded = false;
            if (value == 0) { toDoExpanded = true; }
            if (value == 1)
            {
                if (filter == 4)
                {
                    doneExpanded = true;
                }
                else
                {
                    inProgressExpanded = true;                     
                } 
            }
            if (value == 2) { doneExpanded = true; }
        }
    }
    int filter { get; set; } = 5;
    private DateTime? SelectedStart;
    private DateTime? SelectedEnd;
    private DateRange? dateRange
    {
        get
        {
            return new DateRange(SelectedStart, SelectedEnd);
        }
        set
        {
            if (value != null)
            {
                SelectedStart = value.Start.Value.Date;
                SelectedEnd = value.End.Value.Date.AddDays(1).AddSeconds(-1);
                Filter(4);
            }
        }
    }

    public double[] data = { 0, 0, 0};
    public string[] labels = { "Por hacer", "En progreso", "Completado" };
    public double[] datafilter = { 0, 0 };
    public string[] labelsfilter = { "Todo", "Completado" };


    protected async override void OnInitialized()
    {
        base.OnInitialized();
        Filter(5);
        token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    }

    private void Filter(int type)
    {
        mudmenu?.CloseMenu();
        filter = type;

        ToDos = _conn.GetToDos().ToList();

        if (type != 5)
        {
            if (type == 0)
            {
                SelectedStart = DateTime.Today;
                SelectedEnd = DateTime.Today.AddDays(1).AddSeconds(-1);
            }
            else if (type == 1)
            {
                SelectedStart = GetFirstDayOfWeek(DateTime.Today);
                SelectedEnd = GetFirstDayOfWeek(DateTime.Today).AddDays(7).AddSeconds(-1);
            }
            else if (type == 2)
            {
                SelectedStart = GetFirstDayOfMonth(DateTime.Today.Year, DateTime.Today.Month);
                SelectedEnd = GetLastDayOfMonth(DateTime.Today.Year, DateTime.Today.Month);
            }
            else if (type == 3)
            {
                SelectedStart = new DateTime(DateTime.Today.Year, 1, 1);
                SelectedEnd = new DateTime(DateTime.Today.Year, 12, 31).AddDays(1).AddSeconds(-1);
            }
            ToDosToDo = ToDos.Where(x => x.Status == Status.ToDo && x.Start <= SelectedEnd && (x.End == null || ((x.End.Value >= SelectedStart && x.End.Value <= SelectedEnd) || x.Repeat))).ToList();
            ToDosInProgress = ToDos.Where(x => x.Status == Status.InProgress).ToList();
            ToDosDone = ToDos.Where(x => x.Status == Status.Done && x.CompletedAt >= SelectedStart && x.CompletedAt <= SelectedEnd).ToList();
            if (type == 4)
            {
                ToDosToDo = ToDos.Where(x => x.Status != Status.Done && x.Start <= SelectedEnd && (x.End == null || ((x.End.Value >= SelectedStart && x.End.Value <= SelectedEnd) || x.Repeat))).ToList();
                ToDosInProgress = new List<ToDoItem>();
            }
        }
        else
        {
            SelectedStart = null;
            SelectedEnd = null;
            ToDosToDo = ToDos.Where(x => x.Status == Status.ToDo).ToList();
            ToDosInProgress = ToDos.Where(x => x.Status == Status.InProgress).ToList();
            ToDosDone = ToDos.Where(x => x.Status == Status.Done).ToList();
        }

        if (type == 4)
        {
            datafilter[0] = ToDos.Count();
            datafilter[1] = ToDosDone.Count();
        }
        data[0] = ToDosToDo.Count();
        data[1] = ToDosInProgress.Count();
        data[2] = ToDosDone.Count();

        if (type == 0)
        {
            toDoExpanded = true;
            inProgressExpanded = true;
            doneExpanded = true;
        }
        else
        {
            toDoExpanded = false;
            inProgressExpanded = false;
            doneExpanded = false;
        }
    }

    private void FilterByName()
    {
        if (string.IsNullOrWhiteSpace(searchText)) { searchText = ""; return; }
        Filter(5);
        filter = -1;
        ToDosToDo = ToDos.Where(x => x.Status == Status.ToDo && x.Text.ToLower().Contains(searchText.ToLower())).ToList();
        ToDosInProgress = ToDos.Where(x => x.Status == Status.InProgress && x.Text.ToLower().Contains(searchText.ToLower())).ToList();
        ToDosDone = ToDos.Where(x => x.Status == Status.Done && x.Text.ToLower().Contains(searchText.ToLower())).ToList();
    }

    private async void OpenToDo(ToDoItem todo)
    {
        NavigationManager.NavigateTo($"/edittodo/{todo.Id}");
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private DateTime GetFirstDayOfWeek(DateTime day)
    {
        var diff = (int)day.DayOfWeek - 1;

        if (diff < 0)
            diff += 7;

        return day.AddDays(-diff).Date;
    }

    private async void Delete(int option)
    {
        var cadena = "";
        if (option == 0)
        {
            cadena = "¿Seguro que quieres eliminar todas las tareas?";
        }
        else if (option == 1)
        {
            cadena = "¿Seguro que quieres eliminar todas las tareas pasadas?";
        }
        else if (option == 2)
        {
            cadena = "¿Seguro que quieres eliminar todas las tareas completadas?";
        }
        bool? result = await DialogService.ShowMessageBox(
                "Eliminar",
               cadena,
                yesText: "Si", noText: "Cancelar");
        if (result != true)
        {
            return;
        }

        foreach (var todo in ToDos)
        {
            if (option == 0) //todas
            {
                await TodoService.DeleteToDo(token, FirebasePath, todo);
            }
            else if (option == 1 && todo.End != null && todo.End < DateTime.Now) //pasadas
            {
                await TodoService.DeleteToDo(token, FirebasePath, todo);
            }
            else if (option == 2 && todo.Status == Status.Done) //completadas
            {
                await TodoService.DeleteToDo(token, FirebasePath, todo);
            }
        }

        Filter(5);
        StateHasChanged();
    }

    private DateTime GetFirstDayOfMonth(int year, int month)
    {
        return new DateTime(year, month, 1);
    }
    private DateTime GetLastDayOfMonth(int year, int month)
    {
        return new DateTime(year, month, 1).AddMonths(1).AddSeconds(-1);
    }
}
