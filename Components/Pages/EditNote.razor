@page "/editnote"
@page "/editnote/{Id}"
@using AppNotes.Components.Layout
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@inject ConexionBBDD _conn
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject SynchronizationService SynchronizationService
@inherits Global
@layout MainLayout

@if (Note != null)
{
    <style>
        .mud-picker-container {
            max-width: 70vw;
            overflow: auto;
        }

        .mud-switch {
            margin: 0;
        }

        .rz-html-editor {
            border: none;
        }

        .rz-html-editor:focus-within {
            outline-color: #a8a8a8;
        }

        .rz-html-editor-toolbar {
            background-color: inherit;
            color: inherit;
        }

        .rz-html-editor-button {
            background-color: inherit;
            color: inherit;
        }

        .rz-html-editor-content {
            background-color: inherit;
            color: inherit;
        }

        .rz-html-editor-dropdown-items {
            background-color: inherit;
            color: inherit;
        }

        .rz-html-editor-dropdown-item {
            background-color: inherit;
            color: inherit;
            font-size: 15px !important;
            font-size: medium !important;
        }

        .rz-html-editor-content {
            background-color: @Note.BackgroundColor.ToString();
            color: @Note.TextColor.ToString();
        }
    </style>

    <div class="row p-0 justify-content-between">
        @* TODO: etiquetas  *@
        <div class="col-12 col-sm-2 col-md-1 d-flex p-2">
            <MudSwitch @bind-Value="@edicion" Class="mx-auto" ThumbIcon="@(edicion==true ? Icons.Material.Rounded.Edit : Icons.Material.Rounded.Visibility)"
                       ThumbIconColor="Color.Primary" Size="Size.Large" />
        </div>
        <div class="col-9 col-sm-6 col-md-5 d-flex mb-2 p-0 pt-2">
            <MudIconButton Icon="@Icons.Material.Rounded.ArrowBackIos" Size="Size.Small" Style="height:1.3em; margin-top:0.9em; margin-right:0.2em;" />
            <MudTextField @bind-Value="Name" Immediate Placeholder="Título" Style="height:1.5em; padding-bottom:1em;" Disabled="!edicion" />
            <MudIconButton Icon="@Icons.Material.Rounded.ArrowForwardIos" Size="Size.Small" Style="height:1.3em; margin-top:0.9em; margin-left:0.2em;" />
        </div>
        <div class="col-3 col-sm-3 col-md-6 d-flex justify-content-end">
            <MudMenu @ref="menu" Icon="@Icons.Material.Rounded.MoreVert" Color="Color.Inherit">
                <MudMenuItem AutoClose=false Style="height:3.5em; overflow-hidden" OnClick="@(() => pickerfondo.ToggleOpen())">
                    <div class="p-0 d-flex position-relative" style="height:3.5em; font-size: 0.9em;">
                        <span class="pt-4">Fondo</span>
                        @if(!Note.BackgroundColor.Equals("inherit"))
                        {
                            <MudIconButton Class="position-absolute bottom-0 end-0" Style="margin-right:2.1em; margin-bottom:0.7em;" Size="Size.Small" Icon="@Icons.Material.Rounded.Delete" OnClick="@(() => BackgroundColor = "inherit")"></MudIconButton>
                            <input @bind-value="Note.BackgroundColor" type="color" disabled class="form-control form-control-color position-absolute bottom-0 end-0 mb-2" style="width:2.5em; border:none; background-color:inherit;" />
                        }
                        <MudColorPicker @ref="pickerfondo" @bind-Text="BackgroundColor" ReadOnly AdornmentIcon="" Class="position-absolute bottom-0 end-0" style="width:2.5em; color:transparent; margin-bottom:-5px;" ColorPickerView="ColorPickerView.GridCompact" PickerVariant="PickerVariant.Dialog" />
                    </div>
                </MudMenuItem>
                <MudMenuItem AutoClose=false Style="height:3.5em; overflow-hidden" OnClick="@(() => pickertexto.ToggleOpen())">
                    <div class="p-0 d-flex position-relative" style="height:3.5em; font-size: 0.9em;">
                        <span class="pt-4">Texto</span>
                        @if (!Note.TextColor.Equals("inherit"))
                        {
                            <MudIconButton Class="position-absolute bottom-0 end-0" Style="margin-right:2.1em; margin-bottom:0.7em;" Size="Size.Small" Icon="@Icons.Material.Rounded.Delete" OnClick="@(() => TextColor = "inherit")"></MudIconButton>
                            <input @bind-value="Note.TextColor" type="color" disabled class="form-control form-control-color position-absolute bottom-0 end-0 mb-2" style="width:2.5em; border:none; background-color:inherit;" />
                        }
                        <MudColorPicker @ref="pickertexto" @bind-Text="TextColor" ReadOnly AdornmentIcon="" Class="position-absolute bottom-0 end-0" style="width:2.5em; color:transparent; margin-bottom:-5px;" ColorPickerView="ColorPickerView.GridCompact" PickerVariant="PickerVariant.Dialog" />
                    </div>
                </MudMenuItem>
                <MudMenuItem Style="height:3.5em; padding-top:0; padding-bottom:0;" OnClick="@(() => Favorite = !Favorite)" OnTouch="@(() => Favorite = !Favorite)">
                    <div class="p-0 pt-1 d-flex position-relative" style="height:3.5em; font-size: 0.9em; min-width:9em;">
                        <span class="pt-3">Destacado</span>
                        <MudIcon Icon="@(Favorite ? Icons.Material.Rounded.Star : Icons.Material.Rounded.StarOutline)" Color="@Color.Primary" Class="ms-2 mt-2 me-2 position-absolute end-0" Size="Size.Medium" />
                    </div>
                </MudMenuItem>
                <MudMenuItem Style="height:3.5em; padding-top:0; padding-bottom:0;">
                    <div class="p-0 pt-1 d-flex position-relative" style="height:3.5em; font-size: 0.9em; min-width:9em;">
                        <span class="pt-3">Libreta</span>
                        <MudIcon Icon="@(Favorite ? Icons.Material.Rounded.Star : Icons.Material.Rounded.StarOutline)" Color="@Color.Primary" Class="ms-2 mt-2 me-2 position-absolute end-0" Size="Size.Medium" />
                    </div>
                </MudMenuItem>
                @if (!string.IsNullOrWhiteSpace(Note.Notebook))
                {
                    <MudMenuItem Style="height:3.5em; padding-top:0; padding-bottom:0;" OnClick="@(() => Bookmark = !Bookmark)" OnTouch="@(() => Bookmark = !Bookmark)">
                        <div class="p-0 pt-1 d-flex position-relative" style="height:3em; font-size: 0.9em; min-width:10em;">
                            <span class="pt-3">Marcapáginas</span>
                            <MudIcon Icon="@(Bookmark ? Icons.Material.Rounded.Bookmark : Icons.Material.Rounded.BookmarkBorder)" Color="@Color.Primary" Class="ms-2 mt-2 me-2 position-absolute end-0" Size="Size.Medium" />
                        </div>
                    </MudMenuItem>
                }
                <MudMenuItem OnClick="DeleteNote" OnTouch="DeleteNote">
                    <span style=" font-size: 0.9em;">Eliminar nota</span>
                </MudMenuItem>
            </MudMenu>
        </div>
    </div>

    <RadzenHtmlEditor @bind-Value=@Content @onkeypress=@(() => saved = false) ShowToolbar="edicion" Disabled="!edicion" style="min-height:60vh; margin-top:2em;">
        <RadzenHtmlEditorUndo Title="Deshacer" Shortcut="Ctrl+Z" />
        <RadzenHtmlEditorRedo Title="Rehacer" Shortcut="Ctrl+Y" />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorBold Title="Negrita" Shortcut="Ctrl+B" />
        <RadzenHtmlEditorItalic Title="Cursiva" Shortcut="Ctrl+I" />
        <RadzenHtmlEditorUnderline Title="Subrayado" Shortcut="Ctrl+U" />
        <RadzenHtmlEditorStrikeThrough Title="Tachado" />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorAlignLeft Title="Alinear izquierda" />
        <RadzenHtmlEditorAlignCenter Title="Centrado" />
        <RadzenHtmlEditorAlignRight Title="Alinear derecha" />
        <RadzenHtmlEditorJustify Title="Justificado" />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorIndent Title="Aumentar sangría" />
        <RadzenHtmlEditorOutdent Title="Disminuir sangría" />
        <RadzenHtmlEditorOrderedList Title="Lista" />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorFontName Title="Fuente" Placeholder="Fuente" />
        <RadzenHtmlEditorFontSize Title="Tamaño" Placeholder="Tamaño" />
        @if (!saved)
        {
            <MudIconButton Icon="@Icons.Material.Rounded.Save" Color="Color.Primary" Size="Size.Small" />
        }
    </RadzenHtmlEditor>
}
@code {
    [Parameter]
    public string? Id { get; set; }

    private MudMenu menu;
    private MudColorPicker pickerfondo;
    private MudColorPicker pickertexto;

    private string token;
    private Note Note { get; set; }
    private bool edicion = true;
    private bool saved = true;

    private string Content
    {
        get
        {
            return Note.Content;
        }
        set
        {
            Note.Content = value;
            SaveNote();
        }
    }
    private string Name
    {
        get
        {
            return Note.Name;
        }
        set
        {
            Note.Name = value;
            SaveNote();
        }
    }
    private string BackgroundColor
    {
        get
        {
            return Note.BackgroundColor;
        }
        set
        {
            Note.BackgroundColor = value;
            menu.CloseMenu();
            SaveNote();
        }
    }
    private string TextColor
    {
        get
        {
            return Note.TextColor;
        }
        set
        {
            Note.TextColor = value;
            menu.CloseMenu();
            SaveNote();
        }
    }
    private bool Favorite
    {
        get
        {
            return Note.Favorite;
        }
        set
        {
            Note.Favorite = value;
            SaveNote();
        }
    }
    private bool Bookmark
    {
        get
        {
            return Note.Bookmark;
        }
        set
        {
            Note.Bookmark = value;
            SaveNote();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        SynchronizationService.TrySync(token);
        if (string.IsNullOrWhiteSpace(Id))
        {
            Note = new Note()
                {
                    Id = Guid.NewGuid().ToString(),
                    User = token,
                    Created = DateTime.UtcNow,
                    Modified = DateTime.UtcNow,
                };
            if (!token.Equals("guest"))
            {
                try
                {
                    FirebaseClient client = new FirebaseClient(FirebasePath);
                    var notefirebase = await client.Child("note").PostAsync(Note);
                    var userId = (await client.Child("userauthentication").OnceAsync<UserAuthentication>()).Select(x => x.Object).Where(x => x.Token.Equals(token)).ToList().FirstOrDefault()?.User;
                    Note.User = userId;
                    Note.Id = notefirebase.Key;
                    await client.Child("note").Child(notefirebase.Key).PutAsync(Note);
                    client.Dispose();
                }
                catch
                {
                    var createQueue = new CreateQueue()
                        {
                            Id = Note.Id,
                            Type = DocumentType.Note
                        };
                    _conn.Conn.Insert(createQueue);
                }
            }
            _conn.Conn.Insert(Note);
            NavigationManager.NavigateTo($"/editnote/{Note.Id}");
        }
        else
        {
            Note = _conn.GetNote(Id);
        }
    }

    private async void SaveNote()
    {
        Note.Modified = DateTime.UtcNow;
        if (!token.Equals("guest"))
        {
            try
            {
                FirebaseClient client = new FirebaseClient(FirebasePath);
                await client.Child("note").Child(Note.Id).PutAsync(Note);
                await client.Child("note").Child(Note.Id).PutAsync(Note);
                client.Dispose();
            }
            catch { }
        }
        _conn.GetConnection().Update(Note);
        saved = true;
    }

    private async void DeleteNote()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta nota?",
            yesText: "Confirmar", noText:"Cancelar");
        if (result == true)
        {
            if (!token.Equals("guest"))
            {
                try
                {
                    FirebaseClient client = new FirebaseClient(FirebasePath);
                    await client.Child("note").Child(Note.Id).DeleteAsync();
                    client.Dispose();
                }
                catch
                {
                    DeleteQueue item = new DeleteQueue()
                        {
                            Id = Note.Id,
                            Type = DocumentType.Note
                        };
                    _conn.Conn.Insert(item);
                }
            }
            _conn.Conn.Delete(Note);
            NavigationManager.NavigateTo("library");
        }
    }
}
