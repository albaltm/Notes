@using AppNotes.Components.Components
@using AppNotes.Components.Pages
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inherits LayoutComponentBase

<div class="page" style="height:100vh;">
    <main>
        <MudDialogProvider />
        <MudSnackbarProvider />
        <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="@userTheme" />

        <MudLayout>
            <MudAppBar Elevation="1" Color="Color.Primary" Dense>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
                <MudSpacer />
                
                <MudMenu Icon="@Icons.Material.Rounded.Person" Color="Color.Inherit" class="text-light">
                    <MudText Class="mx-auto py-2 text-center" Typo="Typo.h6"> Tema</MudText>
                    <MudMenuItem AutoClose="false" Style="max-width:70vw">
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@darkModeSystem">
                            <MudToggleItem Value="@("system")" style="font-size: 0.9em;">Sistema</MudToggleItem>
                            <MudToggleItem Value="@("light")" style="font-size: 0.9em;">Claro</MudToggleItem>
                            <MudToggleItem Value="@("dark")" style="font-size: 0.9em;">Oscuro</MudToggleItem>
                        </MudToggleGroup>
                    </MudMenuItem>
                    <MudMenuItem AutoClose="false" Style="max-width:70vw">
                        <MudToggleGroup T="MudTheme" Rounded Outline="false" Delimiters="false" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@userTheme" Color="Color.Transparent">
                            <MudToggleItem Value="@redTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #EF5350;" @onclick="@(() => SetTheme("red"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@pinkTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #F06292;" @onclick="@(() => SetTheme("pink"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@purpleTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #9575CD;" @onclick="@(() => SetTheme("purple"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@blueTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #64B5F6;" @onclick="@(() => SetTheme("blue"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@greenTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #81C784;" @onclick="@(() => SetTheme("green"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@orangeTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #FF8A65;" @onclick="@(() => SetTheme("orange"))" />
                            </MudToggleItem>
                            <MudToggleItem Value="@brownTheme">
                                <MudIcon Icon="@Icons.Material.Rounded.Circle" style="color: #8D6E63;" @onclick="@(() => SetTheme("brown"))" />
                            </MudToggleItem>
                        </MudToggleGroup>
                    </MudMenuItem>
                    @if (!user.Equals("guest"))
                    {
                        <MudMenuItem OnClick="OpenDialog" OnTouch="OpenDialog">
                            <MudText>Cambiar contraseña</MudText>
                        </MudMenuItem>
                    }
                    <MudMenuItem OnTouch="CerrarSesion" OnClick="CerrarSesion">
                        <MudText>@(user.Equals("guest") ? "Salir" : "Cerrar sesión")</MudText>
                    </MudMenuItem>
                </MudMenu>
            </MudAppBar>
            <MudDrawer @bind-Open="@open" Elevation="1" ClipMode="DrawerClipMode.Always">
                <MudNavMenu Rounded="true" Color="Color.Primary">
                    <MudNavLink Match="NavLinkMatch.All" Href="/library" ForceLoad="true" Class="mt-4"><MudIcon Icon="@Icons.Material.Rounded.Book" Class="me-2 my-1 text-muted" /> <MudText class="text-muted d-inline">Biblioteca</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/to-do" ForceLoad="true"><MudIcon Icon="@Icons.Material.Rounded.Checklist" Class="me-2 my-1 text-muted" /> <MudText class="text-muted d-inline">Tareas</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/routines" ForceLoad="true"><MudIcon Icon="@Icons.Material.Rounded.Autorenew" Class="me-2 my-1 text-muted" /> <MudText Class="text-muted d-inline">Rutinas</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Href="/calendar" ForceLoad="true"><MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="me-2 my-1 text-muted" /> <MudText class="text-muted d-inline">Calendario</MudText></MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                <CascadingValue Value="this">
                    <article class="content px-4 pb-2">
                        @Body
                    </article>
                </CascadingValue>
                
            </MudMainContent>
        </MudLayout>
    </main>
</div>

@code {
    public bool _isDarkMode;
    private string DarkModeSystem;
    private string darkModeSystem
    {
        get
        {
            return DarkModeSystem;
        }
        set
        {
            if (value != null)
            {
                if (value.Equals("system"))
                {
                    DarkModeSystem = "system";
                    CambioSystem();
                }
                else if (value.Equals("light"))
                {
                    DarkModeSystem = "light";
                    _isDarkMode = false;
                }
                else if (value.Equals("dark"))
                {
                    DarkModeSystem = "dark";
                    _isDarkMode = true;
                }
                SetDarkModePreference(value);
                StateHasChanged();
            }
        }
    }
    private MudThemeProvider _mudThemeProvider;
    MudTheme userTheme { get; set; }
    bool open = true;
    string user = "";

    private string FirebasePath = "https://appnotes-d61d3-default-rtdb.firebaseio.com/";
    public bool Synchronized { get; set; } = true;

    protected override async void OnInitialized()
    {
        user = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        var darkmode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "darkmode");
        if (string.IsNullOrEmpty(darkmode))
        {
            await JSRuntime.InvokeAsync<string>("localStorage.setItem", "darkmode", "system");
            darkModeSystem = "system";
        }
        else
        {
            darkModeSystem = darkmode;
        }
        GetUserTheme();
        if (darkModeSystem.Equals("system"))
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
        }
        await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
        TryAccessByToken();
        StateHasChanged();
    }

    public async void TryAccessByToken()
    {
        try
        {
            FirebaseClient client = new FirebaseClient(FirebasePath);
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            var sessiontoken = (await client.Child("userauthentication").OnceAsync<UserAuthentication>()).Select(x => x.Object).Where(x => x.Token.Equals(token)).ToList().FirstOrDefault();
            client.Dispose();
            if (!token.Equals("guest") && sessiontoken==null)
            {
                CerrarSesion();
            }
        }
        catch { }
    }

    private async void OpenDialog()
    {
        string email;
        try
        {
            FirebaseClient client = new FirebaseClient(FirebasePath);
            email = (await client.Child("users").OnceAsync<Usuario>()).Select(x => x.Object).Where(x => x.Id.Equals(user)).ToList().FirstOrDefault().Email;
            client.Dispose();
        }
        catch
        {
            Snackbar.Add("No se ha podido procesar la solicitud. Vuelve a intentarlo más tarde", Severity.Error);
            return;
        }
        var parameters = new DialogParameters<PasswordRecovery>();
        parameters.Add(x => x.LoggedEmail, email);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        DialogService.Show<PasswordRecovery>("Recuperación de contraseña", parameters, options);
    }

    public async void CerrarSesion()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (token.Equals("guest"))
        {
            bool? result = await DialogService.ShowMessageBox(
            "Cerrar sesión",
            "¿Seguro? Se perderán todos tus datos",
            yesText: "Confirmar", noText: "Cancelar");
            if (result != true)
            {
                return;
            }
        }

        try
        {
            _conn.Vaciar();
        }
        catch { return; }
        
        if (!token.Equals("guest"))
        {
            try
            {
                FirebaseClient client = new FirebaseClient(FirebasePath);
                await client.Child("userauthentication").Child(token).DeleteAsync();
            }
            catch { }
        }
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", "");
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", "");
        NavigationManager.NavigateTo("/");
    }

    public async void CambioSystem()
    {
        _isDarkMode = await _mudThemeProvider.GetSystemPreference();
        StateHasChanged();
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        if (darkModeSystem.Equals("system"))
        {
            _isDarkMode = newValue;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    public async void SetDarkModePreference(string preference)
    {
        await JSRuntime.InvokeAsync<string>("localStorage.setItem", "darkmode", preference);
    }

    public async void SetTheme(string color)
    {
        await JSRuntime.InvokeAsync<string>("localStorage.setItem", "theme", color);
    }

    public async void GetUserTheme()
    {
        var theme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
        if (theme == null)
        {
            await JSRuntime.InvokeAsync<string>("localStorage.setItem", "theme", "pink");
            userTheme = pinkTheme;
        }
        else if (theme.Equals("red"))
        {
            userTheme = redTheme;
        }
        else if (theme.Equals("pink"))
        {
            userTheme = pinkTheme;
        }
        else if (theme.Equals("purple"))
        {
            userTheme = purpleTheme;
        }
        else if (theme.Equals("blue"))
        {
            userTheme = blueTheme;
        }
        else if (theme.Equals("green"))
        {
            userTheme = greenTheme;
        }
        else if (theme.Equals("orange"))
        {
            userTheme = orangeTheme;
        }
        else if (theme.Equals("brown"))
        {
            userTheme = brownTheme;
        }
        StateHasChanged();
    }

    MudTheme redTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.Red.Lighten2
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.Red.Darken4
            }
        };
    MudTheme pinkTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.Pink.Lighten3
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.Pink.Darken3
            }
        };
    MudTheme purpleTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.DeepPurple.Lighten3
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.DeepPurple.Darken1
            }
        };
    MudTheme blueTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.Blue.Lighten3
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.Blue.Darken2
            }
        };
    MudTheme greenTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.Green.Lighten2
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.Teal.Default
            }
        };
    MudTheme orangeTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.DeepOrange.Lighten2
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.DeepOrange.Darken4
            }
        };
    MudTheme brownTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = MudBlazor.Colors.Brown.Lighten2
            },
            PaletteDark = new PaletteDark()
            {
                Primary = MudBlazor.Colors.Brown.Darken1
            }
        };

    void ToggleDrawer()
    {
        open = !open;
    }
}