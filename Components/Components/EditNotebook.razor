@using AppNotes.Components.Components
@using AppNotes.Components.Layout
@using AppNotes.Components.Pages
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@inject ConexionBBDD _conn
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject SynchronizationService SynchronizationService
@inject LibraryService LibraryService
@inherits Global

<style>
    .mud-list {
        height: 40vh;
    }
</style>

<MudDialog @onkeypress="@Enter">
    <DialogActions>
        <div class="d-flex w-100">
            <MudIconButton OnClick="() => SaveNotebook()" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.Check"></MudIconButton>
        </div>
    </DialogActions>
    <DialogContent>
        <div class="px-sm-5 pb-4">
            @if (Notebook != null)
            {
                <div class="p-0 d-flex">
                    <span class="m-0 mt-4 me-1 me-sm-4">
                        <IconPicker @bind-Icon="@Icon" />
                    </span>
                    <span style="width:100%;" class="ms-1 ms-sm-4"><MudTextField @bind-Value="Name" Immediate Placeholder="Título" Style="display:inline-block;" /></span>
                </div>


                @if (Notes.Count > 0)
                {
                    <div class="d-flex">
                        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Placeholder="Notas" T="Note" MultiSelection="true" @bind-SelectedValues="SelectedNotes">
                            @foreach (Note note in Notes)
                            {
                                <MudSelectItem T="Note" Value="@note">
                                    <div style="text-overflow:ellipsis; overflow:hidden; white-space:nowrap; margin-left:-1em; font-size:0.9em;">@note.Name</div>
                                </MudSelectItem>
                            }
                        </MudSelect>

                        @if(SelectedNotes.Count() > 1)
                        {
                            <MudIconButton Icon="@Icons.Material.Rounded.Sort" Class="mt-3" OnClick="OpenReorder" />
                        }
                    </div>
                }
            }
        </div>
        
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string? Id { get; set; }

    private List<Note> Notes;
    private IEnumerable<Note> SelectedNotes { get; set; }

    void Close() => MudDialog.Close();


    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SaveNotebook();
        }
    }

    private MudMenu menu;

    private Notebook Notebook { get; set; }

    private string Name
    {
        get
        {
            return Notebook.Name;
        }
        set
        {
            Notebook.Name = value;
        }
    }
    private string Icon
    {
        get
        {
            return Notebook.Icon;
        }
        set
        {
            Notebook.Icon = value;
        }
    }
    private string Bookmark
    {
        get
        {
            return Notebook.Bookmark;
        }
        set
        {
            Notebook.Bookmark = value;
        }
    }

    private string token;
    private bool exitPage = false;

    protected async override Task OnInitializedAsync()
    {
        token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        await SynchronizationService.TrySyncLibrary(token);
        if (string.IsNullOrWhiteSpace(Id))
        {
            Notebook = new Notebook()
                {
                    Id = Guid.NewGuid().ToString(),
                    User = token,
                    Created = DateTime.UtcNow,
                    Modified = DateTime.UtcNow,
                };
            exitPage = true;
        }
        else
        {
            Notebook = _conn.GetNotebook(Id);
        }
        Notes = _conn.GetNotes().Where(x => x.Notebook.Equals(Notebook.Id) || x.Notebook.Equals("")).OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        SelectedNotes = Notes.ToList().Where(x => x.Notebook.Equals(Notebook.Id));
    }

    private async Task SaveNotebook()
    {
        Notebook.Modified = DateTime.UtcNow;
        if (Id == null)
        {
            Id = await LibraryService.CreateNotebook(token, FirebasePath, Notebook);
        }
        else
        {
            _conn.GetConnection().Update(Notebook);
        }

        foreach (var note in Notes)
        {
            if (SelectedNotes.Contains(note) && !note.Notebook.Equals(Notebook.Id))
            {
                note.Notebook = Notebook.Id;
                note.Modified = DateTime.UtcNow;
                var notesinnotebook = _conn.GetNotes().Where(x => x.Notebook.Equals(Notebook.Id));
                note.Position = notesinnotebook.Count();
            }
            else if (!SelectedNotes.Contains(note) && note.Notebook.Equals(Notebook.Id))
            {
                note.Notebook = "";
                note.Modified = DateTime.UtcNow;

                var notesinnotebook = _conn.GetNotes().Where(x => x.Notebook.Equals(Notebook.Id) && !x.Id.Equals(note.Id)).OrderBy(x => x.Position).ToList();
                note.Position = -1;

                var position = 0;
                foreach (var notetoposition in notesinnotebook)
                {
                    notetoposition.Position = position;
                    notetoposition.Modified = DateTime.UtcNow;
                    _conn.Conn.Update(notetoposition);
                    position++;
                }
            }
            _conn.GetConnection().Update(note);
        }

        SynchronizationService.TrySyncLibrary(token);
        Close();
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (selectedValues.Count == 0)
        {
            return null;
        }
        return $"{selectedValues.Count} {(selectedValues.Count > 1 ? "notas seleccionadas" : "nota seleccionada")}";
    }
    private async Task OpenReorder()
    {
        await SaveNotebook();
        var parameters = new DialogParameters<ReorderNotes>();
        parameters.Add(x => x.Id, Notebook.Id);
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        var dialog = await DialogService.ShowAsync<ReorderNotes>("Libreta", parameters, options);
        await dialog.Result;
        Notes = _conn.GetNotes().Where(x => x.Notebook.Equals(Notebook.Id) || x.Notebook.Equals("")).OrderByDescending(x => x.Favorite).ThenByDescending(x => x.Modified).ToList();
        SelectedNotes = Notes.ToList().Where(x => x.Notebook.Equals(Notebook.Id));
    }
}