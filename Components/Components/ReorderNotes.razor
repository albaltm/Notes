@inject IDialogService DialogService
@inject ConexionBBDD _conn
@inject IJSRuntime JsRuntime

<style>
    .mud-table-cell::before{display:none;}
</style>

<MudDialog>
    <DialogActions>
        <div class="d-flex w-100">
            <MudIconButton OnClick="SaveOrder" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.Check"></MudIconButton>
        </div>
    </DialogActions>
    <DialogContent>
         <div class="px-sm-3">
            @if (Notes != null)
            {
                <MudDataGrid Items="@Notes" Style="border:1px solid grey;" Class="w-100">
                    <Columns>
                        <TemplateColumn HeaderClass="d-none p-0 m-0" CellClass="p-0 m-0">
                            <CellTemplate>
                                <div class="row p-0 m-0 mx-auto overflow-hidden" style="width:100%; height:4em;">
                                    <div class="d-inline-block col-2 col-sm-1 p-0 text-center my-auto">
                                        @if (context.Item.Position != 0)
                                        {
                                            <MudIconButton OnClick="() => PreviousPosition(context.Item)" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Rounded.KeyboardArrowUp" />
                                        }
                                    </div>
                                    <div class="col-8 col-sm-10 d-flex my-auto" style="flex-direction:row; cursor:pointer; height:2.9em;">
                                        <p class="my-auto" style="overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:2; word-wrap:anywhere;">
                                            @context.Item.Name
                                        </p>
                                    </div>
                                    <span class="d-inline-block col-2 col-sm-1 p-0 text-center my-auto">
                                        @if (context.Item.Position != Notes.Count() - 1)
                                        {
                                            <MudIconButton OnClick="() => NextPosition(context.Item)" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Rounded.KeyboardArrowDown" />
                                        }
                                    </span>
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string Id { get; set; }

    private List<Note> Notes { get; set; }
    string user;

    void Cancel() => MudDialog.Cancel();

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        user = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        Notes = _conn.GetNotes(user).Where(x => x.Notebook.Equals(Id)).OrderBy(x => x.Position).ToList();
        StateHasChanged();
    }

    private void PreviousPosition(Note note)
    {
        Notes.ElementAt(note.Position-1).Position = note.Position;
        Notes.ElementAt(note.Position).Position = note.Position-1;

        Notes = Notes.OrderBy(x => x.Position).ToList();
    }

    private void NextPosition(Note note)
    {
        Notes.ElementAt(note.Position + 1).Position = note.Position;
        Notes.ElementAt(note.Position).Position = note.Position + 1;

        Notes = Notes.OrderBy(x => x.Position).ToList();
    }

    private void SaveOrder()
    {
        foreach(var note in Notes)
        {
            var dbNote = _conn.GetNote(note.Id);
            if (note.Position != dbNote.Position)
            {
                dbNote.Position = note.Position;
                dbNote.Modified = DateTime.UtcNow;
                _conn.Conn.Update(dbNote);
            }
        }
        MudDialog.Close();
    }
}
