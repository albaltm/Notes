@using AppNotes.Components.Components
@using AppNotes.Components.Layout
@using AppNotes.Components.Pages
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@inject ConexionBBDD _conn
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject SynchronizationService SynchronizationService
@inject EventService EventService
@inherits Global

<MudDialog @onkeypress="@Enter">
    <DialogActions>
        <div class="d-flex w-100 justify-content-between">
            @if (Id != null)
            {
                <MudButton OnClick="() => DeleteEvent()">Eliminar</MudButton>
                <MudIconButton OnClick="() => SaveEvent()" class="small text-dark" Icon="@Icons.Material.Rounded.Check"></MudIconButton>
            }
            else
            {
                <MudIconButton OnClick="() => SaveEvent()" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.Check"></MudIconButton>
            }
        </div>
    </DialogActions>
    <DialogContent>
        <div class="px-sm-5 overflow-visible">
            @if (Event != null)
            {
                <MudForm @ref="form">
                    <div class="p-0 mt-sm-3 d-flex">
                        <span class="m-0 mt-4 me-1 me-sm-4">
                            <IconPicker @bind-Icon="@Icon" />
                        </span>
                        <span style="width:100%;" class="ms-1 ms-sm-4"><MudTextField @bind-Value="Text" Required="true" RequiredError="Campo obligatorio" Immediate Placeholder="Título" Style="display:inline-block;" /></span>
                    </div>

                    <div class="d-flex mb-sm-3 row row-cols-1 row-cols-sm-2" style="margin-top:2.5em;">
                        <MudDatePicker Class="pe-sm-2 col" @bind-Date="StartDate" Label="Inicio" Required="true" RequiredError="Campo obligatorio" PickerVariant="PickerVariant.Dialog"
                                       IsDateDisabledFunc="@((DateTime dt)=>(Id == null && dt.Date < DateTime.Today))" ReadOnly="Id != null && Event.Start < DateTime.Today" />
                        <MudDatePicker Class="ps-sm-2 col" @bind-Date="EndDate" Label="Fin" PickerVariant="PickerVariant.Dialog" Clearable
                                       IsDateDisabledFunc="@((DateTime dt)=>(Id == null && dt.Date < DateTime.Today))" ReadOnly="Id != null && Event.End < DateTime.Now" />
                    </div>

                    <div class="d-flex row row-cols-1 row-cols-sm-2 " style="margin-bottom:3em;">
                        <MudTimePicker Class="pe-sm-2 col" @bind-Time="StartHour" Label="Hora inicio" PickerVariant="PickerVariant.Dialog" Clearable="EndHour == null" ReadOnly="Id != null && Event.Start < DateTime.Today" />
                        <MudTimePicker Class="ps-sm-2 col" @bind-Time="EndHour" Label="Hora fin" PickerVariant="PickerVariant.Dialog" Clearable ReadOnly="Id != null && Event.End < DateTime.Now" />
                    </div>
                </MudForm>
            }
        </div>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string? Id { get; set; }

    MudForm form;
    private List<Event> Events;

    void Close() => MudDialog.Close();


    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SaveEvent();
        }
    }

    private MudMenu menu;

    private Event Event { get; set; }

    private string Text
    {
        get { return Event.Text; }
        set { Event.Text = value; }
    }
    private string Icon
    {
        get { return Event.Icon; }
        set { Event.Icon = value; }
    }

    private DateTime startDate { get; set; }
    private DateTime? StartDate
    {
        get
        {
            return startDate;
        }
        set
        {
            if (value != null)
            {
                if (EndDate == startDate)
                {
                    EndDate = value.Value;
                }
                startDate = value.Value;
                if (EndDate < value.Value)
                {
                    EndDate = value.Value;
                }
            }
        }
    }
    private DateTime? endDate { get; set; }
    private DateTime? EndDate
    {
        get
        {
            //if (endDate == startDate) return null;
            return endDate;
        }
        set
        {
            if (value == null)
            {
                endDate = startDate;
            }
            else
            {
                endDate = value.Value;
                if (StartDate > value.Value)
                {
                    StartDate = value.Value;
                }
            }
        }
    }

    private TimeSpan? startHour { get; set; }
    private TimeSpan? StartHour
    {
        get
        {
            return startHour;
        }
        set
        {
            startHour = value;
            if (EndHour != null && value > EndHour && StartDate == EndDate)
            {
                EndHour = value;
            }
        }
    }
    private TimeSpan? endHour { get; set; }
    private TimeSpan? EndHour
    {
        get
        {
            return endHour;
        }
        set
        {
            endHour = value;
            if ((value < StartHour.Value && ( EndDate == null || StartDate == EndDate))) { StartHour = value; }
        }
    }

    private string user;

    protected async override Task OnInitializedAsync()
    {
        user = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        await SynchronizationService.TrySyncEvents(user);
        if (string.IsNullOrWhiteSpace(Id))
        {
            Event = new Event()
                {
                    Id = Guid.NewGuid().ToString(),
                    User = user
                };
            StartDate = Event.Start.Date;
        }
        else
        {
            Event = _conn.GetEvent(Id);
            startDate = Event.Start.Date;
            if (Event.Start.TimeOfDay != Event.Start.Date.TimeOfDay)
            {
                startHour = Event.Start.TimeOfDay;
            }
            if (Event.End.Value.Date != Event.Start.Date)
            {
                endDate = Event.End.Value.Date;
                if (Event.End.Value.TimeOfDay != Event.End.Value.Date.AddDays(1).AddSeconds(-1).TimeOfDay)
                {
                    endHour = Event.End.Value.TimeOfDay;
                }
            }
        }
    }

    private async Task SaveEvent()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            return;
        }

        Event.Modified = DateTime.UtcNow;


        Event.Start = startDate;
        if (startHour != null)
        {
            Event.Start = Event.Start.Date + startHour.Value;
        }
        if (endDate != null)
        {
            if (endHour != null)
            {
                Event.End = endDate.Value.Date + endHour.Value;
            }
            else
            {
                Event.End = endDate.Value.Date.AddDays(1).AddSeconds(-1);
            }
        }
        else
        {
            if (endHour != null)
            {
                Event.End = startDate.Date + endHour.Value;
            }
            else
            {
                Event.End = startDate.AddDays(1).AddSeconds(-1);
            }
        }


        if (Id == null)
        {
            Id = await EventService.CreateEvent(user, FirebasePath, Event);
        }
        else
        {
            _conn.GetConnection().Update(Event);
        }
        NavigationManager.NavigateTo($"/calendar/{Id}", true);
    }

    private async void DeleteEvent()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar este evento?",
            yesText: "Confirmar", noText: "Cancelar");
        if (result == true)
        {
            await EventService.DeleteEvent(user, FirebasePath, Event);
            Close();
        }
    }
}