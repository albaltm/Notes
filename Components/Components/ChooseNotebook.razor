@using AppNotes.Components.Pages
@using AppNotes.Services
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime;
@inject LibraryService LibraryService
@inject SynchronizationService SynchronizationService
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inherits Global

<style>
    .notebook:hover {
        background-color: rgba(123, 123, 123, 0.2);
    }

    .mud-table-cell::before {
        display: none;
    }
</style>

<MudDialog>
    <DialogContent>
        <div class="px-sm-5 pb-4">
            @if (Notebooks != null)
            {
                <MudDataGrid Items="@Notebooks" Style="border:1px solid grey;">
                    <Columns>
                        <TemplateColumn HeaderClass="d-none p-0 m-0" CellClass="p-0 m-0">
                            <CellTemplate>
                                <div class="notebook row p-0 py-2 m-0 mx-auto overflow-hidden" style="width:100%; height:4em;">
                                    <span class="col-8 col-sm-10 d-flex overflow-hidden" style="cursor:pointer; height:3em;" @onclick="() => AddToNotebook(context.Item)">
                                        <span class="d-inline-block my-auto">
                                            @context.Item.Name
                                        </span>
                                    </span>
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        </div>

    </DialogContent>
</MudDialog>
@code {
    List<Notebook> Notebooks { get; set; } = new List<Notebook>();
    string user;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string Note { get; set; }

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        user = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        Notebooks = _conn.GetNotebooks(user);
        StateHasChanged();
    }

    private async void AddToNotebook(Notebook notebook)
    {
        notebook.Modified = DateTime.UtcNow;
        var note = _conn.GetNote(Note);
        note.Modified = DateTime.UtcNow;
        note.Notebook = notebook.Id;
        var position = _conn.GetNotes(user).Where(x => x.Notebook.Equals(notebook.Id)).Count();
        note.Position = position;

        _conn.Conn.Update(notebook);
        _conn.Conn.Update(note);
        MudDialog.Close();
    }
}
