@using AppNotes.Components.Layout
@using AppNotes.Components.Pages
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@using System.Text.RegularExpressions
@using System.Security.Cryptography
@using System.Text
@layout EmptyLayout
@inject ISnackbar Snackbar
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inherits Global

<MudDialog>
    <DialogActions>
        <div class="d-flex w-100">
            @if (firstView || secondView)
            {
                <MudIconButton OnClick="Next" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.ArrowForwardIos"></MudIconButton>
            }
            else
            {
                <MudIconButton OnClick="ChangePassword" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.Check"></MudIconButton>
            }
        </div>
    </DialogActions>
    <DialogContent>
        @if (loading)
        {
            <div class=" py-4">
                <div class="spinner-border text-dark position-absolute top-50 start-50 translate-middle" role="status">
                    <span class="sr-only"></span>
                </div>
            </div>
        }
        else
        {
            @if (firstView)
            {
                <MudTextField @onkeydown="Enter" T="string" @bind-Value="@userEmail" Label="Introduce tu correo electrónico" Variant="MudBlazor.Variant.Outlined"></MudTextField>
            }
            else if (secondView)
            {
                <div class="row mx-auto" @onkeydown="Enter">
                    <div class="col-12 mx-auto d-flex text-center">
                        <p class="mx-auto">Ingresa tu código</p>
                    </div>
                    <div class="col-12 mx-auto d-flex">
                        <RadzenSecurityCode @bind-Value=@recoveryCode Type="SecurityCodeType.Numeric" Count="5" Gap="2px" class="mx-auto" />
                    </div>
                <div class="col-12 mx-auto d-flex mt-3">
                        <p class="text-muted d-block text-center mx-auto link-dark" style="cursor:pointer" @onclick="Reenviar">¿No lo encuentras? Enviar uno nuevo.</p>
                </div>
                </div>
            }
            else
            {
                <MudForm @ref="form" class="py-2" @onkeydown="Enter">
                    <div class="col-9 col-sm-8 col-lg-7 col-xl-6 mt-2 mx-auto d-flex">
                        <MudTextField Style="max-height: 10vh;" @bind-Value="newPasswd" Label="Nueva contraseña"
                                      Variant="MudBlazor.Variant.Outlined" Adornment="Adornment.End" InputType="@(mostrarNewPasswd ? InputType.Text : InputType.Password)"
                                      AdornmentIcon="@(mostrarNewPasswd ? Icons.Material.Rounded.VisibilityOff : Icons.Material.Rounded.Visibility)"
                                      OnAdornmentClick="@(() => mostrarNewPasswd = !mostrarNewPasswd)" Validation="@(new Func<string, string>(PasswordStrength))" />
                    </div>
                    <div class="col-9 col-sm-8 col-lg-7 col-xl-6 mt-2 mx-auto d-flex">
                        <MudTextField T="string" Style="max-height: 10vh;" Label="Repite la contraseña" Variant="MudBlazor.Variant.Outlined"
                                      Adornment="Adornment.End" InputType="@(mostrarRepeatPasswd ? InputType.Text : InputType.Password)"
                                      AdornmentIcon="@(mostrarRepeatPasswd ? Icons.Material.Rounded.VisibilityOff : Icons.Material.Rounded.Visibility)"
                                      OnAdornmentClick="@(() => mostrarRepeatPasswd = !mostrarRepeatPasswd)" Validation="@(new Func<string, string>(PasswordMatch))" />
                    </div>
                </MudForm>
            }
        }
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    bool firstView = true;
    bool secondView = false;
    bool lastView = false;
    string userEmail = "";
    int code;
    string newPasswd;
    bool mostrarNewPasswd;
    bool mostrarRepeatPasswd;
    bool loading { get; set; } = false;
    Usuario user;
    PasswordResetQueue prq;

    MudForm form;
    string recoveryCode;

    void Cancel() => MudDialog.Cancel();

    private async void Reenviar()
    {
        FirebaseClient client = new FirebaseClient(FirebasePath);
        user = (await client.Child("usuarios").OnceAsync<Usuario>()).Select(x => x.Object).Where(x => x.Email.ToLower().Equals(userEmail.ToLower())).ToList().FirstOrDefault();
        if (user != null)
        {
            prq = (await client.Child("passwordresetqueue").OnceAsync<PasswordResetQueue>()).Select(x => x.Object).Where(x => x.IdUser == user.Id).ToList().FirstOrDefault();
            code = new Random().Next(10000, 100000);
            if (prq == null)
            {
                prq = new PasswordResetQueue { IdUser = user.Id, Code = code, Expiration = DateTime.UtcNow.AddHours(1) };
                var firebaseobject = await client.Child("passwordresetqueue").PostAsync(prq);
                prq.Id = firebaseobject.Key;
            }
            else
            {
                prq.Code = code;
                prq.Expiration = DateTime.UtcNow.AddHours(1);
            }
            await client.Child("passwordresetqueue").Child(prq.Id).PutAsync(prq);
            new Mail("Recuperación de contraseña", $"<h3>Hola, {user.Username}</h3><br/><p>Hemos recibido una solicitud de cambio de contraseña. Introduce este código en la aplicación para restablecerla: <b>{code}</b>.<br/>No tardes mucho, ¡Caduca!</p><br/><p>Si no has sido tu, por favor ignora este mensaje.</p>", user.Email, user.Username).sendMail();
        }
    }

    private async void Next()
    {
        loading = true;
        if (firstView)
        {
            firstView = false;
            secondView = true;
            try
            {
                FirebaseClient client = new FirebaseClient(FirebasePath);
                user = (await client.Child("usuarios").OnceAsync<Usuario>()).Select(x => x.Object).Where(x => x.Email.ToLower().Equals(userEmail.ToLower())).ToList().FirstOrDefault();
                if (user != null)
                {
                    prq = (await client.Child("passwordresetqueue").OnceAsync<PasswordResetQueue>()).Select(x => x.Object).Where(x => x.IdUser == user.Id).ToList().FirstOrDefault();
                    if (prq == null || prq.Expiration < DateTime.UtcNow)
                    {
                        code = new Random().Next(10000, 100000);
                        if (prq == null)
                        {
                            prq = new PasswordResetQueue { IdUser = user.Id, Code = code, Expiration = DateTime.UtcNow.AddHours(1) };
                            var firebaseobject = await client.Child("passwordresetqueue").PostAsync(prq);
                            prq.Id = firebaseobject.Key;
                        }
                        else
                        {
                            prq.Code = code;
                            prq.Expiration = DateTime.UtcNow.AddHours(1);
                        }
                        await client.Child("passwordresetqueue").Child(prq.Id).PutAsync(prq);
                        new Mail("Recuperación de contraseña", $"<h3>Hola, {user.Username}</h3><br/><p>Hemos recibido una solicitud de cambio de contraseña. Introduce este código en la aplicación para restablecerla: <b>{code}</b>.<br/>No tardes mucho, ¡Caduca!</p><br/><p>Si no has sido tu, por favor ignora este mensaje.</p>", user.Email, user.Username).sendMail();
                    }
                    else
                    {
                        code = prq.Code;
                    }
                }
                client.Dispose();
            }
            catch
            {
                Snackbar.Add("No se ha podido procesar la solicitud. Vuelve a intentarlo más tarde", Severity.Error);
            }
        }
        else if (secondView)
        {
            if(recoveryCode != null && recoveryCode.Equals(code+""))
            {
                secondView = false;
                lastView = true;
            }
            else
            {
                Snackbar.Add("El código introducido no es correcto", Severity.Error);
            }
        }
        loading = false;
        StateHasChanged();
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (lastView)
            {
                ChangePassword();
            }
            else
            {
                Next();
            }
        }
    }

    private string PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            return "Campo obligatorio";
        }
        if (pw.Length < 6)
            return "Introduce al menos 6 caracteres";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            return "Introduce al menos una letra mayúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            return "Introduce al menos un número";
        return null;
    }

    private string PasswordMatch(string arg)
    {
        if (newPasswd == null || newPasswd.Equals(arg))
            return null;
        return "La contraseña no coincide";
    }

    private async void ChangePassword()
    {
        loading = true;
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                FirebaseClient client = new FirebaseClient(FirebasePath);
                if (user != null)
                {
                    user.Password = GetSHA1(newPasswd);
                    await client.Child("usuarios").Child(user.Id).PutAsync(user);
                    await client.Child("passwordresetqueue").Child(prq.Id).DeleteAsync();
                    Snackbar.Add("Contraseña cambiada", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "usuario", user.Id);
                    NavigationManager.NavigateTo("/");
                }
                client.Dispose();
            }
            catch
            {
                Snackbar.Add("No se ha podido procesar la solicitud. Vuelve a intentarlo más tarde", Severity.Error);
            }
        }
        loading = false;
    }

    private static string GetSHA1(string str)
    {
        SHA1 sha1 = SHA1Managed.Create();
        ASCIIEncoding encoding = new ASCIIEncoding();
        byte[] stream = null;
        StringBuilder sb = new StringBuilder();
        stream = sha1.ComputeHash(encoding.GetBytes(str));
        for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);
        return sb.ToString();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }
}