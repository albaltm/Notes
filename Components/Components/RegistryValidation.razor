@using AppNotes.Components.Layout
@using AppNotes.Components.Pages
@using AppNotes.Services
@using Firebase.Database
@using Firebase.Database.Query
@using System.Text.RegularExpressions
@using System.Security.Cryptography
@using System.Text
@layout EmptyLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inherits Global

<MudDialog>
    <DialogActions>
        <div class="d-flex w-100">
            <MudIconButton OnClick="ValidateRegistry" class="small text-dark mx-auto" Icon="@Icons.Material.Rounded.Check" Disabled="@loading"></MudIconButton>
        </div>
    </DialogActions>
    <DialogContent>
        <div class="row mx-auto py-3">
            <div class="col-12 mx-auto d-flex text-center">
                <p class="mx-auto">Ingresa tu código</p>
            </div>
            <div class="col-12 mx-auto d-flex">
                <RadzenSecurityCode @onkeydown="Enter" @bind-Value=@recoveryCode Type="SecurityCodeType.Numeric" Count="5" Gap="2px" class="mx-auto" />
            </div>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public RegistryValidationQueue Registryqueue { get; set; }
    [Parameter] public Usuario User { get; set; }
    string recoveryCode;
    int intentos = 0;
    bool loading { get; set; } = false;

    void Cancel() => MudDialog.Cancel();

    private async void ValidateRegistry()
    {
        loading = true;
        try
        {
            FirebaseClient client = new FirebaseClient(FirebasePath);
            if (Registryqueue.Code.ToString().Equals(recoveryCode))
            {
                await client.Child("registryvalidationqueue").Child(Registryqueue.Id).DeleteAsync();
                var firebaseobject = await client.Child("usuarios").PostAsync(User);
                User.Id = firebaseobject.Key;
                await client.Child("usuarios").Child(firebaseobject.Key).PutAsync(User);
                Snackbar.Add("Usuario registrado correctamente", Severity.Success);
                client.Dispose();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "usuario", User.Id);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                intentos++;
                Snackbar.Add("El código introducido es incorrecto", Severity.Error);
            }
            if (intentos == 3)
            {
                Snackbar.Add("Demasiados intentos incorrectos. Vuelve a intentarlo más tarde", Severity.Error);
                await client.Child("registryvalidationqueue").Child(Registryqueue.Id).DeleteAsync();
                client.Dispose();
                Cancel();
            }
            client.Dispose();
        }
        catch
        {
            Snackbar.Add("No se ha podido procesar la solicitud. Vuelve a intentarlo más tarde", Severity.Error);
        }
        loading = false;
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            ValidateRegistry();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }
}