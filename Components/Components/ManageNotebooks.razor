@using AppNotes.Components.Pages
@using AppNotes.Services
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime;
@inject LibraryService LibraryService
@inject SynchronizationService SynchronizationService
@inject NavigationManager NavigationManager
@inject ConexionBBDD _conn
@inherits Global

<style>
    .notebook:hover{
        background-color: rgba(123, 123, 123, 0.2);
    }

    .mud-table-cell::before {
        display: none;
    }
</style>

<MudDialog>
    <DialogContent>
        <div class="px-sm-5 pb-4">
            @if (Notebooks != null)
            {
                <MudDataGrid Items="@Notebooks" Style="border:1px solid grey;">
                    <Columns>
                        <TemplateColumn HeaderClass="d-none p-0 m-0" CellClass="p-0 m-0">
                            <CellTemplate>
                                <div class="notebook row p-0 m-0 mx-auto overflow-hidden" style="width:100%; height:4em;">
                                    <span class="col-8 col-sm-10 d-flex my-auto" style="flex-direction:row;cursor:pointer; height:2.9em;" @onclick="() => FilterNotebook(context.Item)">
                                        <span class="my-auto" style="overflow: hidden; display: -webkit-box; -webkit-box-orient:vertical; -webkit-line-clamp:2; word-wrap:anywhere;">
                                            @context.Item.Name
                                        </span>
                                    </span>

                                    <span class="d-inline-block col-4 col-sm-2 p-0 text-center my-auto">
                                        <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Rounded.Edit" OnClick="() => EditNotebook(context.Item)" />
                                        <MudIconButton Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Rounded.Delete" OnClick="() => DeleteNotebook(context.Item)" />
                                    </span>
                                </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>

                <div class="d-flex mt-3">
                    <MudButton StartIcon="@Icons.Material.Rounded.Add" Class="mx-auto" OnClick="() => EditNotebook(null)">Nueva</MudButton>
                </div>
            }
        </div>

    </DialogContent>
</MudDialog>
@code {
    List<Notebook> Notebooks { get; set; } = new List<Notebook>();
    string user;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        user = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        Notebooks = _conn.GetNotebooks(user);
        StateHasChanged();
    }

    private async void EditNotebook(Notebook notebook)
    {
        var parameters = new DialogParameters<EditNotebook>();
        if (notebook != null)
        {
            parameters.Add(x => x.Id, notebook.Id);

        }
        MudBlazor.DialogOptions options = new MudBlazor.DialogOptions()
            {
                DisableBackdropClick = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };
        var dialog = await DialogService.ShowAsync<EditNotebook>("Libreta", parameters, options);
        var result = await dialog.Result;
        Notebooks = _conn.GetNotebooks(user);
        StateHasChanged();
    }

    private async void DeleteNotebook(Notebook notebook)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Seguro que quieres eliminar esta libreta?",
            yesText: "Si", noText: "Cancelar");
        if (result == true)
        {
            var notes = _conn.GetNotes(user).Where(x => x.Notebook.Equals(notebook.Id));
            if (notes.Count() > 0)
            {
                bool? resultNotes = await DialogService.ShowMessageBox(
            "Eliminar",
            "¿Quieres eliminar también todas las notas incluidas en esta libreta?",
            yesText: "Si", noText: "Cancelar");
                if (resultNotes == true)
                {

                    foreach (var note in notes)
                    {
                        await LibraryService.DeleteNote(user, FirebasePath, note);
                    }
                }
            }
            
            await LibraryService.DeleteNotebook(user, FirebasePath, notebook);
            Notebooks.Remove(notebook);

            await SynchronizationService.TrySyncLibrary(user);
            StateHasChanged();
        }
    }

    private void FilterNotebook(Notebook notebook)
    {
        NavigationManager.NavigateTo($"library/{notebook.Id}", true);
    }
}
